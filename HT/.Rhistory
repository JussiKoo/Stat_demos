{
if (sguesses[i] != sguesses[i+1])
{
if (nsame == 1)
{
H <- sguesses[i]
break
}
nsame <- 1
}
else nsame = nsame+1
}
Hs[j] <- H
}
Hs <- Hs[! Hs %in% -1]
lambdahat <- sum(Hs)/length(Hs)
plot(table(Hs))
lines(1:20, dpois(1:20, lambda=lambdahat), type="l", add=TRUE)
}
#Testausta
Hdist(100, 0.3, 10000)
Hdist <- function(n, theta, nsim)
{
Hs <- rep(NA,nsim)
for (j in 1:nsim)
{
guesses <- rgeom(n, theta)
sguesses <- sort(guesses)
H <- -1
nsame <- 1
if (length(sguesses) == 1)
{
H <- sguesses[1]
Hs[j] <- H
break
}
for (i in 1:(length(sguesses)-1)) #Miksi täältä tulee vielä H = -1 välillä?
{
if (sguesses[i] != sguesses[i+1])
{
if (nsame == 1)
{
H <- sguesses[i]
break
}
nsame <- 1
}
else nsame = nsame+1
}
Hs[j] <- H
}
Hs <- Hs[! Hs %in% -1]
lambdahat <- sum(Hs)/length(Hs)
plot(table(Hs))
lines(1:20, dpois(1:20, lambda=lambdahat), type="l")
}
Hdist(100, 0.3, 10000)
Hdist(100, 0.3, 10000)
Hdist <- function(n, theta, nsim)
{
Hs <- rep(NA,nsim)
for (j in 1:nsim)
{
guesses <- rgeom(n, theta)
sguesses <- sort(guesses)
H <- -1
nsame <- 1
if (length(sguesses) == 1)
{
H <- sguesses[1]
Hs[j] <- H
break
}
for (i in 1:(length(sguesses)-1)) #Miksi täältä tulee vielä H = -1 välillä?
{
if (sguesses[i] != sguesses[i+1])
{
if (nsame == 1)
{
H <- sguesses[i]
break
}
nsame <- 1
}
else nsame = nsame+1
}
Hs[j] <- H
}
Hs <- Hs[! Hs %in% -1]
lambdahat <- sum(Hs)/length(Hs)
plot(table(Hs))
lines(1:20, dpois(1:20, lambda=lambdahat), col="red")
}
Hdist(100, 0.3, 10000)
Hdist <- function(n, theta, nsim)
{
Hs <- rep(NA,nsim)
for (j in 1:nsim)
{
guesses <- rgeom(n, theta)
sguesses <- sort(guesses)
H <- -1
nsame <- 1
if (length(sguesses) == 1)
{
H <- sguesses[1]
Hs[j] <- H
break
}
for (i in 1:(length(sguesses)-1)) #Miksi täältä tulee vielä H = -1 välillä?
{
if (sguesses[i] != sguesses[i+1])
{
if (nsame == 1)
{
H <- sguesses[i]
break
}
nsame <- 1
}
else nsame = nsame+1
}
Hs[j] <- H
}
Hs <- Hs[! Hs %in% -1]
lambdahat <- sum(Hs)/length(Hs)
plot(table(Hs)/length(Hs))
lines(1:20, dpois(1:20, lambda=lambdahat), col="red")
}
#Testausta
Hdist(100, 0.3, 10000)
Hdist(1000, 0.3, 10000)
Hdist(100, 0.3, 10000)
Hdist(100, 0.3, 10000)
Hdist(100, 0.3, 10000)
Hs <- c(-1,-1,2,3,-1,3,4,-1)
Hs <- Hs[! Hs %in% -1]
Hs
lenght(Hs)
length(Hs)
sum(Hs)
Hdist <- function(n, theta, nsim)
{
Hs <- rep(NA,nsim)
for (j in 1:nsim)
{
guesses <- rgeom(n, theta)
sguesses <- sort(guesses)
H <- -1
nsame <- 1
if (length(sguesses) == 1)
{
H <- sguesses[1]
Hs[j] <- H
break
}
for (i in 1:(length(sguesses)-1)) #Miksi täältä tulee vielä H = -1 välillä?
{
if (sguesses[i] != sguesses[i+1])
{
if (nsame == 1)
{
H <- sguesses[i]
break
}
nsame <- 1
}
else nsame = nsame+1
}
Hs[j] <- H
}
Hs <- Hs[! Hs %in% -1]
lambdahat <- sum(Hs)/length(Hs)
plot(table(Hs)/length(Hs), x="Kakka", y="Pylle")
#lines(1:20, dpois(1:20, lambda=lambdahat), col="red") #Jakauman sovittaminen, mikä?
}
#Testausta
Hdist(100, 0.3, 10000)
Hdist <- function(n, theta, nsim)
{
Hs <- rep(NA,nsim)
for (j in 1:nsim)
{
guesses <- rgeom(n, theta)
sguesses <- sort(guesses)
H <- -1
nsame <- 1
if (length(sguesses) == 1)
{
H <- sguesses[1]
Hs[j] <- H
break
}
for (i in 1:(length(sguesses)-1)) #Miksi täältä tulee vielä H = -1 välillä?
{
if (sguesses[i] != sguesses[i+1])
{
if (nsame == 1)
{
H <- sguesses[i]
break
}
nsame <- 1
}
else nsame = nsame+1
}
Hs[j] <- H
}
Hs <- Hs[! Hs %in% -1]
lambdahat <- sum(Hs)/length(Hs)
plot(table(Hs)/length(Hs), xlab="Occurences of H", ylab="Relative frequency")
#lines(1:20, dpois(1:20, lambda=lambdahat), col="red") #Jakauman sovittaminen, mikä?
}
Hdist(100, 0.3, 10000)
Hdist <- function(n, theta, nsim)
{
Hs <- rep(NA,nsim)
for (j in 1:nsim)
{
guesses <- rgeom(n, theta)
sguesses <- sort(guesses)
H <- -1
nsame <- 1
if (length(sguesses) == 1)
{
H <- sguesses[1]
Hs[j] <- H
break
}
for (i in 1:(length(sguesses)-1)) #Miksi täältä tulee vielä H = -1 välillä?
{
if (sguesses[i] != sguesses[i+1])
{
if (nsame == 1)
{
H <- sguesses[i]
break
}
nsame <- 1
}
else nsame = nsame+1
}
Hs[j] <- H
}
Hs <- Hs[! Hs %in% -1]
lambdahat <- sum(Hs)/length(Hs)
plot(table(Hs)/length(Hs), xlab="Occurences of different H", ylab="Relative frequency")
#lines(1:20, dpois(1:20, lambda=lambdahat), col="red") #Jakauman sovittaminen, mikä?
}
Hdist(100, 0.3, 10000)
Hdist <- function(n, theta, nsim)
{
Hs <- rep(NA,nsim)
for (j in 1:nsim)
{
guesses <- rgeom(n, theta)
sguesses <- sort(guesses)
H <- -1
nsame <- 1
if (length(sguesses) == 1)
{
H <- sguesses[1]
Hs[j] <- H
break
}
for (i in 1:(length(sguesses)-1)) #Miksi täältä tulee vielä H = -1 välillä?
{
if (sguesses[i] != sguesses[i+1])
{
if (nsame == 1)
{
H <- sguesses[i]
break
}
nsame <- 1
}
else nsame = nsame+1
}
Hs[j] <- H
}
#Otetaan pois -1 H-arvot eli kun kukaan ei voittanut.
#Hs <- Hs[! Hs %in% -1]
lambdahat <- sum(Hs)/length(Hs)
plot(table(Hs)/length(Hs), xlab="Occurences of different H", ylab="Relative frequency")
#lines(1:20, dpois(1:20, lambda=lambdahat), col="red") #Jakauman sovittaminen, mikä?
}
#Testausta
Hdist(100, 0.3, 10000)
Hdist <- function(n, theta, nsim)
{
Hs <- rep(NA,nsim)
for (j in 1:nsim)
{
guesses <- rgeom(n, theta)
sguesses <- sort(guesses)
H <- -1
nsame <- 1
if (length(sguesses) == 1)
{
H <- sguesses[1]
Hs[j] <- H
break
}
for (i in 1:(length(sguesses)-1)) #Miksi täältä tulee vielä H = -1 välillä?
{
if (sguesses[i] != sguesses[i+1])
{
if (nsame == 1)
{
H <- sguesses[i]
break
}
nsame <- 1
}
else nsame = nsame+1
}
Hs[j] <- H
}
#Otetaan pois -1 H-arvot eli kun kukaan ei voittanut.
Hs <- Hs[! Hs %in% -1]
lambdahat <- sum(Hs)/length(Hs)
plot(table(Hs)/length(Hs), xlab="Occurences of different H", ylab="Relative frequency")
#lines(1:20, dpois(1:20, lambda=lambdahat), col="red") #Jakauman sovittaminen, mikä?
}
Hdist(100, 0.9, 10000)
Hdist(100, 0.6, 10000)
Hdist(100, 0.2, 10000)
Hdist(100, 0.1, 10000)
#Excercise 4
Hdist <- function(n, theta, nsim)
{
Hs <- rep(NA,nsim)
for (j in 1:nsim)
{
guesses <- rgeom(n, theta) #Simuloidaan ihmisten arvauksia
sguesses <- sort(guesses) #Järjestetään arvaukset
H <- -1
nsame <- 1
if (length(sguesses) == 1)
{
H <- sguesses[1]
Hs[j] <- H
break
}
#Etstitään voittava arvaus
for (i in 1:(length(sguesses)-1))
{
if (sguesses[i] != sguesses[i+1])
{
if (nsame == 1)
{
H <- sguesses[i]
break
}
nsame <- 1
}
else nsame = nsame+1
}
Hs[j] <- H
}
#Otetaan pois -1 H-arvot eli kun kukaan ei voittanut.
Hs <- Hs[! Hs %in% -1]
lambdahat <- sum(Hs)/length(Hs)
plot(table(Hs)/length(Hs), xlab="Occurences of different H", ylab="Relative frequency")
#lines(1:20, dpois(1:20, lambda=lambdahat), col="red") #Jakauman sovittaminen, mikä?
}
#Testausta
Hdist(100, 0.1, 10000)
library(ggplot2)
ui <- fluidPage(
titlePanel("Estimation of maximum likelihood"),
sidebarLayout(
sidebarPanel(
#Radio buttons to choose the model
radioButtons(inputId = "model", h3("Choose the distribution"),
choices = list("Poisson" = 1, "Normal" = 2, "Exponent"=3, "Geometric"=4), selected = 1
),
#Slider input to choose the max sample size
sliderInput(
inputId = "n", h3("Choose sample size"), value = 100, min=1, max=10000
),
#Slider to choose the value of the model parameter.
#sliderInput(
#  inputId = "theta", h3("Choose the value for estimated parameter"), value = 1, min = 1, max=10
#),
uiOutput("thetaSlider")
),
mainPanel(
plotOutput("plot")
)
)
)
shiny::runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
?geom_line
runApp('C:/kurssit/TILA141/HT')
#plot(1:input$n, mle)
#Plot the mle's against sample sizes and also the real value of
#model parameter.
ggplot(data=estimates, aes(x=n,y=MLE))+
geom_point(color="blue")+
geom_line(aes(y=theta), col="red")+
xlab("Sample size")+
ylab("Maximum likelihood estimate")
library(ggplot2)
ui <- fluidPage(
titlePanel("Estimation of maximum likelihood"),
sidebarLayout(
sidebarPanel(
#Radio buttons to choose the model
radioButtons(inputId = "model", h3("Choose the distribution"),
choices = list("Poisson" = 1, "Normal" = 2, "Exponent"=3, "Geometric"=4), selected = 1
),
#Slider input to choose the max sample size
sliderInput(
inputId = "n", h3("Choose sample size"), value = 100, min=1, max=10000
),
uiOutput("thetaSlider")
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
#Theta-slider's min and max change depending on the chosen distribution.
output$thetaSlider <- renderUI({
minval <- 0.1
maxval <- 10
if (input$model == 1 || input$model == 3)
{
minval <- 0.1
maxval <- 10
}
else if (input$model == 2 )
{
minval <- -10
maxval <- 10
}
else if (input$model == 4 )
{
minval <- 0.01
maxval <- 0.99
}
sliderInput("theta", "Theta", min=minval, max=maxval, value=minval)
})
output$plot <- renderPlot({
theta <- input$theta
#Generate random numbers from chosen distribution with chosen parameter and
#evaluate mle's from all different sample sizesfrom 1 to chosen max sample
#size.
if (input$model == 1 )
{
x <- rpois(input$n, lambda=theta)
mle <- cumsum(x)/1:input$n
}
else if (input$model == 2 )
{
x <- rnorm(input$n, mean=theta, sd=1)
mle <- cumsum(x)/1:input$n
}
else if (input$model == 3 )
{
x <- rexp(input$n, rate=theta)
mle <- 1:input$n/cumsum(x)
}
else if (input$model == 4 )
{
x <- rgeom(input$n, prob=theta)
mle <- 1/(1+cumsum(x)/(1:input$n))
}
estimates <- data.frame(n = 1:input$n, MLE = mle)
#plot(1:input$n, mle)
#Plot the mle's against sample sizes and also the real value of
#model parameter.
ggplot(data=estimates, aes(x=n,y=MLE))+
geom_point(color="blue")+
geom_line(aes(y=theta), col="red")+
xlab("Sample size")+
ylab("Maximum likelihood estimate")
#abline(a=theta, b=0, col=2)
})
}
shinyApp(ui = ui, server = server)
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
runApp('C:/kurssit/TILA141/HT')
